class Solution:
    def maxValue(self, n: int, index: int, ms: int) -> int:

        def solve(m):  
            need = m

            # left
            leftv = index - (m - 1)
            need += ((m - 1) * m) // 2
            if leftv < 0:
                tmp = abs(leftv)
                offset = (tmp * (tmp + 1)) // 2
                need -= offset

            # right
            rightv = index + (m - 1)
            need += ((m - 1) * m) // 2
            if rightv >= n:
                tmp = rightv - (n - 1)
                offset = (tmp * (tmp + 1)) // 2
                need -= offset

            return need <= remain

        remain = ms - n
        l, r = 0, remain
        ans = 0

        if solve(r):
            return r + 1

        while l < r:
            m = (l + r) // 2

            if solve(m):
                ans = max(ans, m)
                l = m + 1
            else:
                r = m
        return ans + 1
