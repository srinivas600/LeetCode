class Solution:
    def knightDialer(self, n: int) -> int:
        def solve(left, nxt):
            if left == 1:
                return len(nxt)
            ans = 0
            for num in nxt:
                curr = dp[left][num]
                if curr == 0:
                    curr = solve(left -1, moves[num])
                    dp[left][num] = curr
                ans += curr
                ans %= ((10 ** 9) + 7)
            return ans
        #from example two we can get following woves
        moves = [[4, 6],
                [6, 8],
                [7, 9],
                [4, 8],
                [0, 3, 9],
                [],
                [0, 1, 7],
                [2, 6],
                [1, 3],
                [2, 4]]
        dp = [[0] * 10 for i in range(n+1)]
        opt = solve(n, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
        print(dp)
        return opt
