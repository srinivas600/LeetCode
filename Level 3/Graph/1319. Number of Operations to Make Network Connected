class Solution:
    def makeConnected(self, n: int, connections: List[List[int]]) -> int:
        graph = {}
        for i in range(n):
            graph[i] = []
        for i in connections:
            graph[i[0]].append(i)
            graph[i[1]].append([i[1], i[0]])
        #print(graph)
        visited = set()
        def dfs(i):
            if i in visited:
                return 0
            visited.add(i)
            for j in graph[i]:
                dfs(j[1])
            return 1
        components = 0
        for i in range(n):
            if dfs(i):
                components += 1
        red_edges = len(connections) - ((n-1) - (components-1))
        #print(red_edges)
        if red_edges >= (components) -1:
            return components -1
        else:
            return -1
