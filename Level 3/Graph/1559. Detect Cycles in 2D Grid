class Solution:
    def containsCycle(self, grid: List[List[str]]) -> bool:

        def solve(i, j, prev):
            if (i, j) in visited:
                return True
            visited.add((i, j))
            for x, y in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                if i + x < 0 or j + y < 0 or i + x >= n or (x + i, y + j) == prev or j + y >= m or grid[i][j] != grid[x + i][y + j]:
                    continue
                if solve(x + i, y + j, (i, j)):
                    return True
            return False
        n, m = len(grid), len(grid[0])
        visited = set()
        for i in range(n):
            for j in range(m):
                if (i, j) not in visited and solve(i, j, (-1, -1)):
                    print(i, j)
                    return True
        return False
